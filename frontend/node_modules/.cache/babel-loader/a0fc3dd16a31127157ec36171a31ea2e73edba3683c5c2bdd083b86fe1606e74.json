{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nandh\\\\OneDrive\\\\Desktop\\\\Online_Voting\\\\online-voting\\\\frontend\\\\src\\\\components\\\\VoterDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VoterDashboard = () => {\n  _s();\n  const [candidates, setCandidates] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetch(\"http://localhost:5000/api/candidates\").then(response => response.json()).then(data => {\n      setCandidates(data);\n      setLoading(false);\n    }).catch(error => {\n      console.error(\"Error fetching candidates:\", error);\n      setLoading(false);\n    });\n  }, []);\n  const castVote = candidateId => {\n    fetch(\"http://localhost:5000/api/vote\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        candidateId\n      })\n    }).then(response => response.json()).then(data => {\n      alert(\"Vote Cast Successfully!\");\n    }).catch(error => console.error(\"Error casting vote:\", error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Online Voting System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading candidates...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: candidates.map(candidate => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"candidate-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: candidate.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 17\n          }, this), \" - \", candidate.party]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://localhost:5000/uploads/${candidate.logo}`,\n          alt: candidate.name,\n          className: \"candidate-logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => castVote(candidate._id),\n          children: \"Vote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this)]\n      }, candidate._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(VoterDashboard, \"NpRueS+HYDJu3UELfAEmk4FMMJU=\");\n_c = VoterDashboard;\nexport default VoterDashboard;\nvar _c;\n$RefreshReg$(_c, \"VoterDashboard\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","VoterDashboard","_s","candidates","setCandidates","loading","setLoading","fetch","then","response","json","data","catch","error","console","castVote","candidateId","method","headers","body","JSON","stringify","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","candidate","name","party","src","logo","alt","onClick","_id","_c","$RefreshReg$"],"sources":["C:/Users/nandh/OneDrive/Desktop/Online_Voting/online-voting/frontend/src/components/VoterDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst VoterDashboard = () => {\r\n  const [candidates, setCandidates] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://localhost:5000/api/candidates\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCandidates(data);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching candidates:\", error);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const castVote = (candidateId) => {\r\n    fetch(\"http://localhost:5000/api/vote\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ candidateId }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        alert(\"Vote Cast Successfully!\");\r\n      })\r\n      .catch((error) => console.error(\"Error casting vote:\", error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Online Voting System</h1>\r\n\r\n      {loading ? (\r\n        <p>Loading candidates...</p>\r\n      ) : (\r\n        <ul>\r\n          {candidates.map((candidate) => (\r\n            <li key={candidate._id} className=\"candidate-item\">\r\n              <p>\r\n                <strong>{candidate.name}</strong> - {candidate.party}\r\n              </p>\r\n              <img\r\n                src={`http://localhost:5000/uploads/${candidate.logo}`}\r\n                alt={candidate.name}\r\n                className=\"candidate-logo\"\r\n              />\r\n              <button onClick={() => castVote(candidate._id)}>Vote</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VoterDashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACdU,KAAK,CAAC,sCAAsC,CAAC,CAC1CC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACdP,aAAa,CAACO,IAAI,CAAC;MACnBL,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,CACDM,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDP,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,QAAQ,GAAIC,WAAW,IAAK;IAChCT,KAAK,CAAC,gCAAgC,EAAE;MACtCU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEL;MAAY,CAAC;IACtC,CAAC,CAAC,CACCR,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACdW,KAAK,CAAC,yBAAyB,CAAC;IAClC,CAAC,CAAC,CACDV,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC,CAAC;EAClE,CAAC;EAED,oBACEb,OAAA;IAAKuB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBxB,OAAA;MAAAwB,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAE5BvB,OAAO,gBACNL,OAAA;MAAAwB,QAAA,EAAG;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAE5B5B,OAAA;MAAAwB,QAAA,EACGrB,UAAU,CAAC0B,GAAG,CAAEC,SAAS,iBACxB9B,OAAA;QAAwBuB,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAChDxB,OAAA;UAAAwB,QAAA,gBACExB,OAAA;YAAAwB,QAAA,EAASM,SAAS,CAACC;UAAI;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,OAAG,EAACE,SAAS,CAACE,KAAK;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnD,CAAC,eACJ5B,OAAA;UACEiC,GAAG,EAAE,iCAAiCH,SAAS,CAACI,IAAI,EAAG;UACvDC,GAAG,EAAEL,SAAS,CAACC,IAAK;UACpBR,SAAS,EAAC;QAAgB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CAAC,eACF5B,OAAA;UAAQoC,OAAO,EAAEA,CAAA,KAAMrB,QAAQ,CAACe,SAAS,CAACO,GAAG,CAAE;UAAAb,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GATtDE,SAAS,CAACO,GAAG;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUlB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC1B,EAAA,CAvDID,cAAc;AAAAqC,EAAA,GAAdrC,cAAc;AAyDpB,eAAeA,cAAc;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}