{"ast":null,"code":"const express = require(\"express\");\nconst multer = require(\"multer\");\nconst path = require(\"path\");\nconst fs = require(\"fs\"); // For file deletion\nconst Candidate = require(\"../models/Candidate\");\nconst router = express.Router();\n\n// ✅ Ensure \"uploads/\" directory exists\nconst uploadDir = \"uploads/\";\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir);\n}\n\n// ✅ Multer Storage Configuration\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, \"uploads/\"); // Ensure \"uploads\" folder exists\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + path.extname(file.originalname));\n  }\n});\nconst upload = multer({\n  storage\n});\n\n// ✅ Get All Candidates\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const candidates = await Candidate.find();\n    res.json(candidates);\n  } catch (error) {\n    console.error(\"Error fetching candidates:\", error);\n    res.status(500).json({\n      message: error.message\n    });\n  }\n});\n\n// ✅ Add Candidate (POST /api/candidates/addCandidate)\nrouter.post(\"/addCandidate\", upload.single(\"logo\"), async (req, res) => {\n  try {\n    console.log(\"Request Body:\", req.body);\n    console.log(\"Uploaded File:\", req.file);\n    if (!req.body.name || !req.body.party) {\n      return res.status(400).json({\n        message: \"Name and party are required.\"\n      });\n    }\n    const {\n      name,\n      party\n    } = req.body;\n    const logo = req.file ? req.file.filename : null;\n    const newCandidate = new Candidate({\n      name,\n      party,\n      logo\n    });\n    await newCandidate.save();\n    res.status(201).json(newCandidate);\n  } catch (error) {\n    console.error(\"Error adding candidate:\", error);\n    res.status(500).json({\n      message: error.message\n    });\n  }\n});\n\n// ✅ Update Candidate (PUT /api/candidates/update/:id)\nrouter.put(\"/update/:id\", upload.single(\"logo\"), async (req, res) => {\n  try {\n    const {\n      id\n    } = req.params;\n    const {\n      name,\n      party\n    } = req.body;\n    const updateData = {\n      name,\n      party\n    };\n    if (req.file) {\n      updateData.logo = req.file.filename;\n    }\n    const updatedCandidate = await Candidate.findByIdAndUpdate(id, updateData, {\n      new: true\n    });\n    if (!updatedCandidate) return res.status(404).json({\n      message: \"Candidate not found\"\n    });\n    res.json(updatedCandidate);\n  } catch (error) {\n    console.error(\"Error updating candidate:\", error);\n    res.status(500).json({\n      message: error.message\n    });\n  }\n});\n\n// ✅ Delete Candidate (DELETE /api/candidates/delete/:id)\nrouter.delete(\"/delete/:id\", async (req, res) => {\n  try {\n    const {\n      id\n    } = req.params;\n    const candidate = await Candidate.findById(id);\n    if (!candidate) return res.status(404).json({\n      message: \"Candidate not found\"\n    });\n\n    // Delete the candidate's image if it exists\n    if (candidate.logo) {\n      const filePath = path.join(__dirname, \"../uploads\", candidate.logo);\n      if (fs.existsSync(filePath)) {\n        fs.unlinkSync(filePath);\n      }\n    }\n    await Candidate.findByIdAndDelete(id);\n    res.json({\n      message: \"Candidate deleted successfully\"\n    });\n  } catch (error) {\n    console.error(\"Error deleting candidate:\", error);\n    res.status(500).json({\n      message: error.message\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","multer","path","fs","Candidate","router","Router","uploadDir","existsSync","mkdirSync","storage","diskStorage","destination","req","file","cb","filename","Date","now","extname","originalname","upload","get","res","candidates","find","json","error","console","status","message","post","single","log","body","name","party","logo","newCandidate","save","put","id","params","updateData","updatedCandidate","findByIdAndUpdate","new","delete","candidate","findById","filePath","join","__dirname","unlinkSync","findByIdAndDelete","module","exports"],"sources":["C:/Users/nandh/OneDrive/Desktop/Online_Voting/online-voting/frontend/src/components/CandidateManagement.js"],"sourcesContent":["const express = require(\"express\");\r\nconst multer = require(\"multer\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");  // For file deletion\r\nconst Candidate = require(\"../models/Candidate\");\r\n\r\nconst router = express.Router();\r\n\r\n// ✅ Ensure \"uploads/\" directory exists\r\nconst uploadDir = \"uploads/\";\r\nif (!fs.existsSync(uploadDir)) {\r\n    fs.mkdirSync(uploadDir);\r\n}\r\n\r\n// ✅ Multer Storage Configuration\r\nconst storage = multer.diskStorage({\r\n    destination: (req, file, cb) => {\r\n        cb(null, \"uploads/\"); // Ensure \"uploads\" folder exists\r\n    },\r\n    filename: (req, file, cb) => {\r\n        cb(null, Date.now() + path.extname(file.originalname));\r\n    },\r\n});\r\nconst upload = multer({ storage });\r\n\r\n// ✅ Get All Candidates\r\nrouter.get(\"/\", async (req, res) => {\r\n    try {\r\n        const candidates = await Candidate.find();\r\n        res.json(candidates);\r\n    } catch (error) {\r\n        console.error(\"Error fetching candidates:\", error);\r\n        res.status(500).json({ message: error.message });\r\n    }\r\n});\r\n\r\n// ✅ Add Candidate (POST /api/candidates/addCandidate)\r\nrouter.post(\"/addCandidate\", upload.single(\"logo\"), async (req, res) => {\r\n    try {\r\n        console.log(\"Request Body:\", req.body);\r\n        console.log(\"Uploaded File:\", req.file);\r\n\r\n        if (!req.body.name || !req.body.party) {\r\n            return res.status(400).json({ message: \"Name and party are required.\" });\r\n        }\r\n\r\n        const { name, party } = req.body;\r\n        const logo = req.file ? req.file.filename : null;\r\n\r\n        const newCandidate = new Candidate({ name, party, logo });\r\n        await newCandidate.save();\r\n\r\n        res.status(201).json(newCandidate);\r\n    } catch (error) {\r\n        console.error(\"Error adding candidate:\", error);\r\n        res.status(500).json({ message: error.message });\r\n    }\r\n});\r\n\r\n// ✅ Update Candidate (PUT /api/candidates/update/:id)\r\nrouter.put(\"/update/:id\", upload.single(\"logo\"), async (req, res) => {\r\n    try {\r\n        const { id } = req.params;\r\n        const { name, party } = req.body;\r\n        const updateData = { name, party };\r\n\r\n        if (req.file) {\r\n            updateData.logo = req.file.filename;\r\n        }\r\n\r\n        const updatedCandidate = await Candidate.findByIdAndUpdate(id, updateData, { new: true });\r\n\r\n        if (!updatedCandidate) return res.status(404).json({ message: \"Candidate not found\" });\r\n\r\n        res.json(updatedCandidate);\r\n    } catch (error) {\r\n        console.error(\"Error updating candidate:\", error);\r\n        res.status(500).json({ message: error.message });\r\n    }\r\n});\r\n\r\n// ✅ Delete Candidate (DELETE /api/candidates/delete/:id)\r\nrouter.delete(\"/delete/:id\", async (req, res) => {\r\n    try {\r\n        const { id } = req.params;\r\n        const candidate = await Candidate.findById(id);\r\n\r\n        if (!candidate) return res.status(404).json({ message: \"Candidate not found\" });\r\n\r\n        // Delete the candidate's image if it exists\r\n        if (candidate.logo) {\r\n            const filePath = path.join(__dirname, \"../uploads\", candidate.logo);\r\n            if (fs.existsSync(filePath)) {\r\n                fs.unlinkSync(filePath);\r\n            }\r\n        }\r\n\r\n        await Candidate.findByIdAndDelete(id);\r\n\r\n        res.json({ message: \"Candidate deleted successfully\" });\r\n    } catch (error) {\r\n        console.error(\"Error deleting candidate:\", error);\r\n        res.status(500).json({ message: error.message });\r\n    }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}