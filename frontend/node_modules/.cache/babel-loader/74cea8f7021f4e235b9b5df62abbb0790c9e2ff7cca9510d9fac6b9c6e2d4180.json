{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nandh\\\\OneDrive\\\\Desktop\\\\Online_Voting\\\\online-voting\\\\frontend\\\\src\\\\components\\\\VoterDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./VoterDashboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:5000/api\";\nconst VoterDashboard = () => {\n  _s();\n  const [candidates, setCandidates] = useState([]);\n  const [hasVoted, setHasVoted] = useState(false);\n  const [isVoting, setIsVoting] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n\n  // ✅ Get voter_id from localStorage\n  const voter_id = localStorage.getItem(\"voter_id\");\n  useEffect(() => {\n    if (!voter_id) {\n      setError(\"❌ Voter ID is required.\");\n      return;\n    }\n    const fetchData = async () => {\n      try {\n        const [candidatesRes, voterStatusRes] = await Promise.all([axios.get(`${API_URL}/candidates`), axios.post(`${API_URL}/voters/check-voter`, {\n          voter_id\n        })]);\n        if (candidatesRes.data.success) {\n          setCandidates(candidatesRes.data.candidates || []);\n        } else {\n          setError(\"❌ Failed to load candidates.\");\n        }\n        if (!voterStatusRes.data.success) {\n          setHasVoted(true);\n          setSuccessMessage(\"✅ You have already voted. Thank you!\");\n        }\n      } catch (error) {\n        console.error(\"❌ Error loading data:\", error);\n        setError(\"❌ Failed to load data. Please refresh.\");\n      }\n    };\n    fetchData();\n  }, [voter_id]);\n  const handleVote = async (candidateId, candidateName) => {\n    if (hasVoted || isVoting) return;\n    setIsVoting(true);\n    setError(\"\");\n    setSuccessMessage(\"\");\n    try {\n      const voteRes = await axios.post(`${API_URL}/vote`, {\n        voter_id,\n        candidateName\n      });\n      if (voteRes.data.success) {\n        setHasVoted(true);\n        setSuccessMessage(`✅ Your vote for ${candidateName} has been recorded successfully!`);\n      } else {\n        setError(\"❌ Voting failed. Please try again.\");\n      }\n    } catch (error) {\n      console.error(\"❌ Error voting:\", error);\n      setError(\"❌ Failed to cast vote. Try again.\");\n    } finally {\n      setIsVoting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 10\n  }, this);\n};\n_s(VoterDashboard, \"YMtFETtnxSPhhHDEjKnu5IYUedw=\");\n_c = VoterDashboard;\nexport default VoterDashboard;\nvar _c;\n$RefreshReg$(_c, \"VoterDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","API_URL","VoterDashboard","_s","candidates","setCandidates","hasVoted","setHasVoted","isVoting","setIsVoting","error","setError","successMessage","setSuccessMessage","voter_id","localStorage","getItem","fetchData","candidatesRes","voterStatusRes","Promise","all","get","post","data","success","console","handleVote","candidateId","candidateName","voteRes","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nandh/OneDrive/Desktop/Online_Voting/online-voting/frontend/src/components/VoterDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./VoterDashboard.css\";\r\n\r\nconst API_URL = \"http://localhost:5000/api\";\r\n\r\nconst VoterDashboard = () => {\r\n  const [candidates, setCandidates] = useState([]);\r\n  const [hasVoted, setHasVoted] = useState(false);\r\n  const [isVoting, setIsVoting] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [successMessage, setSuccessMessage] = useState(\"\");\r\n\r\n  // ✅ Get voter_id from localStorage\r\n  const voter_id = localStorage.getItem(\"voter_id\");\r\n\r\n  useEffect(() => {\r\n    if (!voter_id) {\r\n      setError(\"❌ Voter ID is required.\");\r\n      return;\r\n    }\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const [candidatesRes, voterStatusRes] = await Promise.all([\r\n          axios.get(`${API_URL}/candidates`),\r\n          axios.post(`${API_URL}/voters/check-voter`, { voter_id }),\r\n        ]);\r\n\r\n        if (candidatesRes.data.success) {\r\n          setCandidates(candidatesRes.data.candidates || []);\r\n        } else {\r\n          setError(\"❌ Failed to load candidates.\");\r\n        }\r\n\r\n        if (!voterStatusRes.data.success) {\r\n          setHasVoted(true);\r\n          setSuccessMessage(\"✅ You have already voted. Thank you!\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"❌ Error loading data:\", error);\r\n        setError(\"❌ Failed to load data. Please refresh.\");\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [voter_id]);\r\n\r\n  const handleVote = async (candidateId, candidateName) => {\r\n    if (hasVoted || isVoting) return;\r\n\r\n    setIsVoting(true);\r\n    setError(\"\");\r\n    setSuccessMessage(\"\");\r\n\r\n    try {\r\n      const voteRes = await axios.post(`${API_URL}/vote`, { voter_id, candidateName });\r\n\r\n      if (voteRes.data.success) {\r\n        setHasVoted(true);\r\n        setSuccessMessage(`✅ Your vote for ${candidateName} has been recorded successfully!`);\r\n      } else {\r\n        setError(\"❌ Voting failed. Please try again.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Error voting:\", error);\r\n      setError(\"❌ Failed to cast vote. Try again.\");\r\n    } finally {\r\n      setIsVoting(false);\r\n    }\r\n  };\r\n\r\n  return <div> {/* UI Code Here */} </div>;\r\n};\r\n\r\nexport default VoterDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}